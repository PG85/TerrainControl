buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'signing'

// Project properties
archivesBaseName = "openterraingenerator-forge"
description = "OpenTerrainGenerator for Minecraft Forge"
ext.worldeditVersion = "6.1"
minecraft.runDir = "run"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2838"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20180814"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories
{
    maven 
    {   // Worldedit API
   		url "https://maven.sk89q.com/repo/" 
   	}
}

dependencies
{
    compile project(':common')	
	provided ('com.sk89q.worldedit:worldedit-forge-mc1.11:6.1.6') {
		exclude group: 'com.google.guava'
		exclude group: 'com.google.gson'
	}
	provided ('com.sk89q.worldedit:worldedit-core:6.1') {
		exclude group: 'com.google.guava'
		exclude group: 'com.google.gson'
	}
	compile 'com.google.guava:guava:23.0'
	compile 'com.google.code.gson:gson:2.6.2'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Include all OpenTerrainGenerator files in the jar
jar
{
    destinationDir = new File(project.buildDir, "distributions")
    classifier = ''
    from
    {
        project(":common").sourceSets.main.output.files
    }
}

// Package OTG-Core jar inside the OTG-Forge jar.

reobf {
    asmJar {}
    rootJar {}
}

task asmJar(type: Jar, dependsOn: 'compileJava') {
    from (sourceSets.main.output) {
        // Include all of your coremod files here
        // Example line >> include "testmod/asm/**"
		include "com/pg85/otg/forge/asm/**"
    }
    archiveName = "OTG-Core.jar" // You can change this to anything you wish, remember to change it below also
    manifest {
        // Your previous manifest attributes go here
        // Example line >> attributes 'FMLCorePlugin': 'testmod.asm.TweakPlugin'
		attributes 'FMLCorePlugin': 'com.pg85.otg.forge.asm.excluded.launch.OTGCorePlugin'
		attributes 'FMLCorePluginContainsMod': 'true'
    }
}

task rootJar(type: Jar, dependsOn: ['compileJava', asmJar]) {

	// The common project's manifest will be added to the final OTG jar instead of this one, so OTG-Core.jar and FMLAT have to be listed there as well.
	manifest
    {
		attributes 'ContainedDeps': 'OTG-Core.jar'
        attributes 'FMLAT': 'openterraingenerator_at.cfg'
	}

    from (sourceSets.main.output) {
        // Exclude all of your coremod files here
        // Example line >> exclude "testmod/asm/**"
		exclude "com/pg85/otg/forge/asm/OTGClassTransformer.class"
		exclude "com/pg85/otg/forge/asm/OTGHooks.class"
		exclude "com/pg85/otg/forge/asm/launch/**"
    }
    from ("build/libs") {
        include "OTG-Core.jar" // If you changed the name above, change it here also.
    }
	
	destinationDir = new File(project.buildDir, "distributions")

    // Leave the following line commented out to overwrite the default jar,
    //    otherwise <basename>-root.jar will be created, containing the embedded coremod jar
    // classifier = 'root'
}

build.dependsOn rootJar